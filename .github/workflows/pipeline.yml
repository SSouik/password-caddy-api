name: Deploy Pipeline

on:
  push:
    branches:
      - 'main'

env:
  SAM_VERSION: 1.35.0
  VERSION: v1 # Current Version of the Api
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yml
  REGION: us-east-2
  PIPELINE_EXECUTION_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/password-caddy-cloudformation-pipeline-role
  CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/password-caddy-cloudformation-execution-role
  
  DEV_ARTIFACTS_BUCKET: password-caddy-cloudformation-artifacts-dev
  DEV_STACK_NAME: password-caddy-api-dev

  PROD_ARTIFACTS_BUCKET: password-caddy-cloudformation-artifacts-prod
  PROD_STACK_NAME: password-caddy-api-prod

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
        with:
          version: ${{ env.SAM_VERSION }}

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Validate Template
        run: |
          sam validate --template ${{ env.SAM_TEMPLATE }}
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run unit tests
        run: |
          go test -v \
            password-caddy/util

  build-and-package-dev:
    needs: [validate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
        with:
          version: ${{ env.SAM_VERSION }}

      - name: Build resources
        run: sam build --template ${{ env.SAM_TEMPLATE }}

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
          role-session-name: packaging-dev
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to dev artifact buckets
        run: |
          sam package \
            --s3-bucket ${{ env.DEV_ARTIFACTS_BUCKET }} \
            --s3-prefix ${{ env.VERSION }} \
            --region ${{ env.REGION }} \
            --output-template-file packaged-dev.yml

      - name: Set API env in template file
        run: |
          sed -i 's/{API_ENV}/dev/g' packaged-dev.yml

      - uses: actions/upload-artifact@v2
        with:
          name: packaged-dev.yml
          path: packaged-dev.yml

  deploy-dev:
    needs: [build-and-package-dev]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
        with:
          version: ${{ env.SAM_VERSION }}

      - uses: actions/download-artifact@v2
        with:
          name: packaged-dev.yml

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
          role-session-name: dev-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to dev account
        run: |
          sam deploy --stack-name ${{ env.DEV_STACK_NAME }}-${{ env.VERSION }} \
            --template packaged-dev.yml \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.REGION }} \
            --s3-bucket ${{ env.DEV_ARTIFACTS_BUCKET }} \
            --s3-prefix ${{ env.VERSION }} \
            --no-fail-on-empty-changeset \
            --role-arn ${{ env.CLOUDFORMATION_EXECUTION_ROLE }} \
            --parameter-overrides 'ENV=dev ACCOUNTID=${{ secrets.AWS_ACCOUNT_ID }}'

  # integration-test:
  #   if: github.ref == 'refs/heads/main'
  #   needs: [deploy-testing]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: |
  #         # trigger the integration tests here

  # deploy-prod:
  #   if: github.ref == 'refs/heads/main'
  #   needs: [integration-test]
  #   runs-on: ubuntu-latest
  #   # Configure GitHub Action Environment to have a manual approval step before deployment to production
  #   # https://docs.github.com/en/actions/reference/environments
  #   # environment: <configured-environment>
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #     - uses: aws-actions/setup-sam@v1
          # with:
          #   version: ${{ env.SAM_VERSION }}
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: packaged-prod.yml

  #     - name: Assume the prod pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.REGION }}
  #         role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: prod-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to production account
  #       run: |
  #         sam deploy --stack-name ${{ env.PROD_STACK_NAME }}-${{ env.VERSION }} \
  #           --template packaged-prod.yml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${{ env.REGION }} \
  #           --s3-bucket ${{ env.ARTIFACTS_BUCKET }} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${{ env.CLOUDFORMATION_EXECUTION_ROLE }}
